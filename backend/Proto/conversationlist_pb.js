// source: conversationlist.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.douyin.Container', null, global);
goog.exportSymbol('proto.douyin.GroupInfo', null, global);
goog.exportSymbol('proto.douyin.GroupSettings', null, global);
goog.exportSymbol('proto.douyin.KeyValuePair', null, global);
goog.exportSymbol('proto.douyin.Message', null, global);
goog.exportSymbol('proto.douyin.Response', null, global);
goog.exportSymbol('proto.douyin.TimestampPair', null, global);
goog.exportSymbol('proto.douyin.UserInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Response.displayName = 'proto.douyin.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Container = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.Container.repeatedFields_, null);
};
goog.inherits(proto.douyin.Container, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Container.displayName = 'proto.douyin.Container';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Message.displayName = 'proto.douyin.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.UserInfo.displayName = 'proto.douyin.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.GroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.GroupInfo.repeatedFields_, null);
};
goog.inherits(proto.douyin.GroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.GroupInfo.displayName = 'proto.douyin.GroupInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.GroupSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.GroupSettings.repeatedFields_, null);
};
goog.inherits(proto.douyin.GroupSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.GroupSettings.displayName = 'proto.douyin.GroupSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.KeyValuePair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.KeyValuePair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.KeyValuePair.displayName = 'proto.douyin.KeyValuePair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.TimestampPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.TimestampPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.TimestampPair.displayName = 'proto.douyin.TimestampPair';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getFieldWithDefault(msg, 1, 0),
statusCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
unknown3: jspb.Message.getFieldWithDefault(msg, 3, 0),
message: jspb.Message.getFieldWithDefault(msg, 4, ""),
unknown5: jspb.Message.getFieldWithDefault(msg, 5, 0),
unknown6: jspb.Message.getFieldWithDefault(msg, 6, 0),
container: (f = msg.getContainer()) && proto.douyin.Container.toObject(includeInstance, f),
unknown8: jspb.Message.getFieldWithDefault(msg, 8, ""),
unknown9: jspb.Message.getFieldWithDefault(msg, 9, 0),
unknown10: jspb.Message.getFieldWithDefault(msg, 10, ""),
timestamp1: jspb.Message.getFieldWithDefault(msg, 11, 0),
timestamp2: jspb.Message.getFieldWithDefault(msg, 12, 0),
userId: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Response}
 */
proto.douyin.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Response;
  return proto.douyin.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Response}
 */
proto.douyin.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown3(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown5(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown6(value);
      break;
    case 7:
      var value = new proto.douyin.Container;
      reader.readMessage(value,proto.douyin.Container.deserializeBinaryFromReader);
      msg.setContainer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnknown8(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown9(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnknown10(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp1(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp2(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUnknown3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUnknown5();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUnknown6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getContainer();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.douyin.Container.serializeBinaryToWriter
    );
  }
  f = message.getUnknown8();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUnknown9();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getUnknown10();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTimestamp1();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getTimestamp2();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.douyin.Response.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 status_code = 2;
 * @return {number}
 */
proto.douyin.Response.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 unknown3 = 3;
 * @return {number}
 */
proto.douyin.Response.prototype.getUnknown3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUnknown3 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.douyin.Response.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 unknown5 = 5;
 * @return {number}
 */
proto.douyin.Response.prototype.getUnknown5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUnknown5 = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 unknown6 = 6;
 * @return {number}
 */
proto.douyin.Response.prototype.getUnknown6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUnknown6 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Container container = 7;
 * @return {?proto.douyin.Container}
 */
proto.douyin.Response.prototype.getContainer = function() {
  return /** @type{?proto.douyin.Container} */ (
    jspb.Message.getWrapperField(this, proto.douyin.Container, 7));
};


/**
 * @param {?proto.douyin.Container|undefined} value
 * @return {!proto.douyin.Response} returns this
*/
proto.douyin.Response.prototype.setContainer = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.clearContainer = function() {
  return this.setContainer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.Response.prototype.hasContainer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string unknown8 = 8;
 * @return {string}
 */
proto.douyin.Response.prototype.getUnknown8 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUnknown8 = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 unknown9 = 9;
 * @return {number}
 */
proto.douyin.Response.prototype.getUnknown9 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUnknown9 = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string unknown10 = 10;
 * @return {string}
 */
proto.douyin.Response.prototype.getUnknown10 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUnknown10 = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 timestamp1 = 11;
 * @return {number}
 */
proto.douyin.Response.prototype.getTimestamp1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setTimestamp1 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 timestamp2 = 12;
 * @return {number}
 */
proto.douyin.Response.prototype.getTimestamp2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setTimestamp2 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 user_id = 13;
 * @return {number}
 */
proto.douyin.Response.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.Container.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Container.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Container.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Container} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Container.toObject = function(includeInstance, msg) {
  var f, obj = {
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.douyin.Message.toObject, includeInstance),
unknown2: jspb.Message.getFieldWithDefault(msg, 2, 0),
unknown3: jspb.Message.getFieldWithDefault(msg, 3, 0),
userInfo: (f = msg.getUserInfo()) && proto.douyin.UserInfo.toObject(includeInstance, f),
groupInfo: (f = msg.getGroupInfo()) && proto.douyin.GroupInfo.toObject(includeInstance, f),
groupSettings: (f = msg.getGroupSettings()) && proto.douyin.GroupSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Container}
 */
proto.douyin.Container.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Container;
  return proto.douyin.Container.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Container} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Container}
 */
proto.douyin.Container.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.douyin.Message;
      reader.readMessage(value,proto.douyin.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown3(value);
      break;
    case 20:
      var value = new proto.douyin.UserInfo;
      reader.readMessage(value,proto.douyin.UserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 50:
      var value = new proto.douyin.GroupInfo;
      reader.readMessage(value,proto.douyin.GroupInfo.deserializeBinaryFromReader);
      msg.setGroupInfo(value);
      break;
    case 51:
      var value = new proto.douyin.GroupSettings;
      reader.readMessage(value,proto.douyin.GroupSettings.deserializeBinaryFromReader);
      msg.setGroupSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Container.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Container.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Container} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Container.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.douyin.Message.serializeBinaryToWriter
    );
  }
  f = message.getUnknown2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUnknown3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.douyin.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getGroupInfo();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.douyin.GroupInfo.serializeBinaryToWriter
    );
  }
  f = message.getGroupSettings();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.douyin.GroupSettings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.douyin.Message>}
 */
proto.douyin.Container.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.douyin.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.Message, 1));
};


/**
 * @param {!Array<!proto.douyin.Message>} value
 * @return {!proto.douyin.Container} returns this
*/
proto.douyin.Container.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.douyin.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.Message}
 */
proto.douyin.Container.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.douyin.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.Container} returns this
 */
proto.douyin.Container.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional int32 unknown2 = 2;
 * @return {number}
 */
proto.douyin.Container.prototype.getUnknown2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Container} returns this
 */
proto.douyin.Container.prototype.setUnknown2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 unknown3 = 3;
 * @return {number}
 */
proto.douyin.Container.prototype.getUnknown3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Container} returns this
 */
proto.douyin.Container.prototype.setUnknown3 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UserInfo user_info = 20;
 * @return {?proto.douyin.UserInfo}
 */
proto.douyin.Container.prototype.getUserInfo = function() {
  return /** @type{?proto.douyin.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.douyin.UserInfo, 20));
};


/**
 * @param {?proto.douyin.UserInfo|undefined} value
 * @return {!proto.douyin.Container} returns this
*/
proto.douyin.Container.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.Container} returns this
 */
proto.douyin.Container.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.Container.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional GroupInfo group_info = 50;
 * @return {?proto.douyin.GroupInfo}
 */
proto.douyin.Container.prototype.getGroupInfo = function() {
  return /** @type{?proto.douyin.GroupInfo} */ (
    jspb.Message.getWrapperField(this, proto.douyin.GroupInfo, 50));
};


/**
 * @param {?proto.douyin.GroupInfo|undefined} value
 * @return {!proto.douyin.Container} returns this
*/
proto.douyin.Container.prototype.setGroupInfo = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.Container} returns this
 */
proto.douyin.Container.prototype.clearGroupInfo = function() {
  return this.setGroupInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.Container.prototype.hasGroupInfo = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional GroupSettings group_settings = 51;
 * @return {?proto.douyin.GroupSettings}
 */
proto.douyin.Container.prototype.getGroupSettings = function() {
  return /** @type{?proto.douyin.GroupSettings} */ (
    jspb.Message.getWrapperField(this, proto.douyin.GroupSettings, 51));
};


/**
 * @param {?proto.douyin.GroupSettings|undefined} value
 * @return {!proto.douyin.Container} returns this
*/
proto.douyin.Container.prototype.setGroupSettings = function(value) {
  return jspb.Message.setWrapperField(this, 51, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.Container} returns this
 */
proto.douyin.Container.prototype.clearGroupSettings = function() {
  return this.setGroupSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.Container.prototype.hasGroupSettings = function() {
  return jspb.Message.getField(this, 51) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
type: jspb.Message.getFieldWithDefault(msg, 2, 0),
status: jspb.Message.getFieldWithDefault(msg, 3, 0),
content: jspb.Message.getFieldWithDefault(msg, 4, ""),
secUid: jspb.Message.getFieldWithDefault(msg, 5, ""),
unknown6: jspb.Message.getFieldWithDefault(msg, 6, 0),
unknown7: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Message}
 */
proto.douyin.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Message;
  return proto.douyin.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Message}
 */
proto.douyin.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecUid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown6(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown7(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecUid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUnknown6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUnknown7();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.douyin.Message.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.douyin.Message.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.douyin.Message.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.douyin.Message.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sec_uid = 5;
 * @return {string}
 */
proto.douyin.Message.prototype.getSecUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setSecUid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 unknown6 = 6;
 * @return {number}
 */
proto.douyin.Message.prototype.getUnknown6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setUnknown6 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 unknown7 = 7;
 * @return {number}
 */
proto.douyin.Message.prototype.getUnknown7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setUnknown7 = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
content: jspb.Message.getFieldWithDefault(msg, 4, ""),
secUid: jspb.Message.getFieldWithDefault(msg, 5, ""),
unknown6: jspb.Message.getFieldWithDefault(msg, 6, 0),
unknown7: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.UserInfo}
 */
proto.douyin.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.UserInfo;
  return proto.douyin.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.UserInfo}
 */
proto.douyin.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecUid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown6(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown7(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecUid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUnknown6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUnknown7();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.douyin.UserInfo.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.UserInfo} returns this
 */
proto.douyin.UserInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.douyin.UserInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.UserInfo} returns this
 */
proto.douyin.UserInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.douyin.UserInfo.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.UserInfo} returns this
 */
proto.douyin.UserInfo.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sec_uid = 5;
 * @return {string}
 */
proto.douyin.UserInfo.prototype.getSecUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.UserInfo} returns this
 */
proto.douyin.UserInfo.prototype.setSecUid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 unknown6 = 6;
 * @return {number}
 */
proto.douyin.UserInfo.prototype.getUnknown6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.UserInfo} returns this
 */
proto.douyin.UserInfo.prototype.setUnknown6 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 unknown7 = 7;
 * @return {number}
 */
proto.douyin.UserInfo.prototype.getUnknown7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.UserInfo} returns this
 */
proto.douyin.UserInfo.prototype.setUnknown7 = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.GroupInfo.repeatedFields_ = [11,42];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.GroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.GroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.GroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
groupId: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupIdLong: jspb.Message.getFieldWithDefault(msg, 2, 0),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
createTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
name: jspb.Message.getFieldWithDefault(msg, 5, ""),
description: jspb.Message.getFieldWithDefault(msg, 6, ""),
avatarUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
unknown8: jspb.Message.getFieldWithDefault(msg, 8, 0),
unknown9: jspb.Message.getFieldWithDefault(msg, 9, ""),
attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.douyin.KeyValuePair.toObject, includeInstance),
ownerId: jspb.Message.getFieldWithDefault(msg, 12, 0),
ownerSecUid: jspb.Message.getFieldWithDefault(msg, 13, ""),
unknown14: jspb.Message.getFieldWithDefault(msg, 14, 0),
unknown15: jspb.Message.getFieldWithDefault(msg, 15, 0),
unknown16: jspb.Message.getFieldWithDefault(msg, 16, 0),
ownerId2: jspb.Message.getFieldWithDefault(msg, 17, 0),
createTimestamp: jspb.Message.getFieldWithDefault(msg, 18, 0),
unknown40: jspb.Message.getFieldWithDefault(msg, 40, 0),
unknown41: jspb.Message.getFieldWithDefault(msg, 41, 0),
timestampPairsList: jspb.Message.toObjectList(msg.getTimestampPairsList(),
    proto.douyin.TimestampPair.toObject, includeInstance),
unknown43: jspb.Message.getFieldWithDefault(msg, 43, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.GroupInfo}
 */
proto.douyin.GroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.GroupInfo;
  return proto.douyin.GroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.GroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.GroupInfo}
 */
proto.douyin.GroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupIdLong(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown8(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnknown9(value);
      break;
    case 11:
      var value = new proto.douyin.KeyValuePair;
      reader.readMessage(value,proto.douyin.KeyValuePair.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwnerId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerSecUid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown14(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown15(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown16(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwnerId2(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTimestamp(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown40(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown41(value);
      break;
    case 42:
      var value = new proto.douyin.TimestampPair;
      reader.readMessage(value,proto.douyin.TimestampPair.deserializeBinaryFromReader);
      msg.addTimestampPairs(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown43(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.GroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.GroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.GroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupIdLong();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUnknown8();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getUnknown9();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.douyin.KeyValuePair.serializeBinaryToWriter
    );
  }
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getOwnerSecUid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getUnknown14();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getUnknown15();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getUnknown16();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getOwnerId2();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getCreateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getUnknown40();
  if (f !== 0) {
    writer.writeInt32(
      40,
      f
    );
  }
  f = message.getUnknown41();
  if (f !== 0) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = message.getTimestampPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      42,
      f,
      proto.douyin.TimestampPair.serializeBinaryToWriter
    );
  }
  f = message.getUnknown43();
  if (f !== 0) {
    writer.writeInt32(
      43,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.douyin.GroupInfo.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 group_id_long = 2;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getGroupIdLong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setGroupIdLong = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 create_time = 4;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.douyin.GroupInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.douyin.GroupInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string avatar_url = 7;
 * @return {string}
 */
proto.douyin.GroupInfo.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setAvatarUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 unknown8 = 8;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown8 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown8 = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string unknown9 = 9;
 * @return {string}
 */
proto.douyin.GroupInfo.prototype.getUnknown9 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown9 = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated KeyValuePair attributes = 11;
 * @return {!Array<!proto.douyin.KeyValuePair>}
 */
proto.douyin.GroupInfo.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.douyin.KeyValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.KeyValuePair, 11));
};


/**
 * @param {!Array<!proto.douyin.KeyValuePair>} value
 * @return {!proto.douyin.GroupInfo} returns this
*/
proto.douyin.GroupInfo.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.douyin.KeyValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.KeyValuePair}
 */
proto.douyin.GroupInfo.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.douyin.KeyValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional int64 owner_id = 12;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string owner_sec_uid = 13;
 * @return {string}
 */
proto.douyin.GroupInfo.prototype.getOwnerSecUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setOwnerSecUid = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 unknown14 = 14;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown14 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown14 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 unknown15 = 15;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown15 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown15 = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 unknown16 = 16;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown16 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown16 = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 owner_id2 = 17;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getOwnerId2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setOwnerId2 = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int64 create_timestamp = 18;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getCreateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setCreateTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 unknown40 = 40;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown40 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown40 = function(value) {
  return jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional int32 unknown41 = 41;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown41 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown41 = function(value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * repeated TimestampPair timestamp_pairs = 42;
 * @return {!Array<!proto.douyin.TimestampPair>}
 */
proto.douyin.GroupInfo.prototype.getTimestampPairsList = function() {
  return /** @type{!Array<!proto.douyin.TimestampPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.TimestampPair, 42));
};


/**
 * @param {!Array<!proto.douyin.TimestampPair>} value
 * @return {!proto.douyin.GroupInfo} returns this
*/
proto.douyin.GroupInfo.prototype.setTimestampPairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 42, value);
};


/**
 * @param {!proto.douyin.TimestampPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.TimestampPair}
 */
proto.douyin.GroupInfo.prototype.addTimestampPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 42, opt_value, proto.douyin.TimestampPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.clearTimestampPairsList = function() {
  return this.setTimestampPairsList([]);
};


/**
 * optional int32 unknown43 = 43;
 * @return {number}
 */
proto.douyin.GroupInfo.prototype.getUnknown43 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupInfo} returns this
 */
proto.douyin.GroupInfo.prototype.setUnknown43 = function(value) {
  return jspb.Message.setProto3IntField(this, 43, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.GroupSettings.repeatedFields_ = [9,32];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.GroupSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.GroupSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.GroupSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GroupSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
groupId: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupIdLong: jspb.Message.getFieldWithDefault(msg, 2, 0),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
unknown4: jspb.Message.getFieldWithDefault(msg, 4, 0),
timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
unknown6: jspb.Message.getFieldWithDefault(msg, 6, 0),
unknown7: jspb.Message.getFieldWithDefault(msg, 7, 0),
unknown8: jspb.Message.getFieldWithDefault(msg, 8, 0),
settingsList: jspb.Message.toObjectList(msg.getSettingsList(),
    proto.douyin.KeyValuePair.toObject, includeInstance),
timestamp2: jspb.Message.getFieldWithDefault(msg, 10, 0),
unknown11: jspb.Message.getFieldWithDefault(msg, 11, 0),
unknown12: jspb.Message.getFieldWithDefault(msg, 12, 0),
unknown13: jspb.Message.getFieldWithDefault(msg, 13, 0),
unknown14: jspb.Message.getFieldWithDefault(msg, 14, 0),
unknown15: jspb.Message.getFieldWithDefault(msg, 15, 0),
unknown16: jspb.Message.getFieldWithDefault(msg, 16, 0),
timestampPairsList: jspb.Message.toObjectList(msg.getTimestampPairsList(),
    proto.douyin.TimestampPair.toObject, includeInstance),
unknown33: jspb.Message.getFieldWithDefault(msg, 33, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.GroupSettings}
 */
proto.douyin.GroupSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.GroupSettings;
  return proto.douyin.GroupSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.GroupSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.GroupSettings}
 */
proto.douyin.GroupSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupIdLong(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown4(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown6(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown7(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown8(value);
      break;
    case 9:
      var value = new proto.douyin.KeyValuePair;
      reader.readMessage(value,proto.douyin.KeyValuePair.deserializeBinaryFromReader);
      msg.addSettings(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp2(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown11(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown12(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown13(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown14(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown15(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown16(value);
      break;
    case 32:
      var value = new proto.douyin.TimestampPair;
      reader.readMessage(value,proto.douyin.TimestampPair.deserializeBinaryFromReader);
      msg.addTimestampPairs(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown33(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.GroupSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.GroupSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.GroupSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GroupSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupIdLong();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUnknown4();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getUnknown6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUnknown7();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUnknown8();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getSettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.douyin.KeyValuePair.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp2();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getUnknown11();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getUnknown12();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getUnknown13();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getUnknown14();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getUnknown15();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getUnknown16();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getTimestampPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      32,
      f,
      proto.douyin.TimestampPair.serializeBinaryToWriter
    );
  }
  f = message.getUnknown33();
  if (f !== 0) {
    writer.writeInt32(
      33,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.douyin.GroupSettings.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 group_id_long = 2;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getGroupIdLong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setGroupIdLong = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 unknown4 = 4;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown4 = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 unknown6 = 6;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown6 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 unknown7 = 7;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown7 = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 unknown8 = 8;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown8 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown8 = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated KeyValuePair settings = 9;
 * @return {!Array<!proto.douyin.KeyValuePair>}
 */
proto.douyin.GroupSettings.prototype.getSettingsList = function() {
  return /** @type{!Array<!proto.douyin.KeyValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.KeyValuePair, 9));
};


/**
 * @param {!Array<!proto.douyin.KeyValuePair>} value
 * @return {!proto.douyin.GroupSettings} returns this
*/
proto.douyin.GroupSettings.prototype.setSettingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.douyin.KeyValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.KeyValuePair}
 */
proto.douyin.GroupSettings.prototype.addSettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.douyin.KeyValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.clearSettingsList = function() {
  return this.setSettingsList([]);
};


/**
 * optional int32 timestamp2 = 10;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getTimestamp2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setTimestamp2 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 unknown11 = 11;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown11 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown11 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 unknown12 = 12;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown12 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown12 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 unknown13 = 13;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown13 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown13 = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 unknown14 = 14;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown14 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown14 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 unknown15 = 15;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown15 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown15 = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 unknown16 = 16;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown16 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown16 = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated TimestampPair timestamp_pairs = 32;
 * @return {!Array<!proto.douyin.TimestampPair>}
 */
proto.douyin.GroupSettings.prototype.getTimestampPairsList = function() {
  return /** @type{!Array<!proto.douyin.TimestampPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.TimestampPair, 32));
};


/**
 * @param {!Array<!proto.douyin.TimestampPair>} value
 * @return {!proto.douyin.GroupSettings} returns this
*/
proto.douyin.GroupSettings.prototype.setTimestampPairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.douyin.TimestampPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.TimestampPair}
 */
proto.douyin.GroupSettings.prototype.addTimestampPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.douyin.TimestampPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.clearTimestampPairsList = function() {
  return this.setTimestampPairsList([]);
};


/**
 * optional int32 unknown33 = 33;
 * @return {number}
 */
proto.douyin.GroupSettings.prototype.getUnknown33 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GroupSettings} returns this
 */
proto.douyin.GroupSettings.prototype.setUnknown33 = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.KeyValuePair.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.KeyValuePair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.KeyValuePair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.KeyValuePair.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.KeyValuePair}
 */
proto.douyin.KeyValuePair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.KeyValuePair;
  return proto.douyin.KeyValuePair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.KeyValuePair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.KeyValuePair}
 */
proto.douyin.KeyValuePair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.KeyValuePair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.KeyValuePair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.KeyValuePair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.KeyValuePair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.douyin.KeyValuePair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.KeyValuePair} returns this
 */
proto.douyin.KeyValuePair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.douyin.KeyValuePair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.KeyValuePair} returns this
 */
proto.douyin.KeyValuePair.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.TimestampPair.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.TimestampPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.TimestampPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.TimestampPair.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.TimestampPair}
 */
proto.douyin.TimestampPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.TimestampPair;
  return proto.douyin.TimestampPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.TimestampPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.TimestampPair}
 */
proto.douyin.TimestampPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.TimestampPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.TimestampPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.TimestampPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.TimestampPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.douyin.TimestampPair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.TimestampPair} returns this
 */
proto.douyin.TimestampPair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.douyin.TimestampPair.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.TimestampPair} returns this
 */
proto.douyin.TimestampPair.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.douyin);
