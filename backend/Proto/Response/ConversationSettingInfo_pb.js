// source: ConversationSettingInfo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var MuteReadBadgeCountInfo_pb = require('./MuteReadBadgeCountInfo_pb.js');
goog.object.extend(proto, MuteReadBadgeCountInfo_pb);
goog.exportSymbol('proto.douyin.ConversationSettingInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ConversationSettingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.ConversationSettingInfo.repeatedFields_, null);
};
goog.inherits(proto.douyin.ConversationSettingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ConversationSettingInfo.displayName = 'proto.douyin.ConversationSettingInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.ConversationSettingInfo.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ConversationSettingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ConversationSettingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ConversationSettingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationSettingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conversationShortId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conversationType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    readIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mute: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stickOnTop: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inboxType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    extMap: (f = msg.getExtMap()) ? f.toObject(includeInstance, undefined) : [],
    settingVersion: jspb.Message.getFieldWithDefault(msg, 10, 0),
    favorite: jspb.Message.getFieldWithDefault(msg, 11, 0),
    setTopTime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    setFavoriteTime: jspb.Message.getFieldWithDefault(msg, 13, 0),
    readIndexV2: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minIndexV2: jspb.Message.getFieldWithDefault(msg, 15, 0),
    readBadgeCount: jspb.Message.getFieldWithDefault(msg, 16, 0),
    muteReadBadgeCountInfosList: jspb.Message.toObjectList(msg.getMuteReadBadgeCountInfosList(),
    MuteReadBadgeCountInfo_pb.MuteReadBadgeCountInfo.toObject, includeInstance),
    pushStatus: jspb.Message.getFieldWithDefault(msg, 30, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ConversationSettingInfo}
 */
proto.douyin.ConversationSettingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ConversationSettingInfo;
  return proto.douyin.ConversationSettingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ConversationSettingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ConversationSettingInfo}
 */
proto.douyin.ConversationSettingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConversationShortId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMute(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStickOnTop(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboxType(value);
      break;
    case 9:
      var value = msg.getExtMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSettingVersion(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFavorite(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSetTopTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSetFavoriteTime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadIndexV2(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinIndexV2(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReadBadgeCount(value);
      break;
    case 17:
      var value = new MuteReadBadgeCountInfo_pb.MuteReadBadgeCountInfo;
      reader.readMessage(value,MuteReadBadgeCountInfo_pb.MuteReadBadgeCountInfo.deserializeBinaryFromReader);
      msg.addMuteReadBadgeCountInfos(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPushStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ConversationSettingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ConversationSettingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ConversationSettingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationSettingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationShortId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConversationType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMinIndex();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getReadIndex();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMute();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getStickOnTop();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInboxType();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getExtMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSettingVersion();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getFavorite();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getSetTopTime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getSetFavoriteTime();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getReadIndexV2();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getMinIndexV2();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getReadBadgeCount();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMuteReadBadgeCountInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      MuteReadBadgeCountInfo_pb.MuteReadBadgeCountInfo.serializeBinaryToWriter
    );
  }
  f = message.getPushStatus();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
};


/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.douyin.ConversationSettingInfo.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 conversation_short_id = 2;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getConversationShortId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setConversationShortId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 conversation_type = 3;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getConversationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setConversationType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 min_index = 4;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getMinIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setMinIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 read_index = 5;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getReadIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setReadIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 mute = 6;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getMute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setMute = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 stick_on_top = 7;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getStickOnTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setStickOnTop = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 inbox_type = 8;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getInboxType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setInboxType = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> ext = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.ConversationSettingInfo.prototype.getExtMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.clearExtMap = function() {
  this.getExtMap().clear();
  return this;};


/**
 * optional int64 setting_version = 10;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getSettingVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setSettingVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 favorite = 11;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getFavorite = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setFavorite = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 set_top_time = 12;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getSetTopTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setSetTopTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 set_favorite_time = 13;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getSetFavoriteTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setSetFavoriteTime = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 read_index_v2 = 14;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getReadIndexV2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setReadIndexV2 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 min_index_v2 = 15;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getMinIndexV2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setMinIndexV2 = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 read_badge_count = 16;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getReadBadgeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setReadBadgeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated MuteReadBadgeCountInfo mute_read_badge_count_infos = 17;
 * @return {!Array<!proto.douyin.MuteReadBadgeCountInfo>}
 */
proto.douyin.ConversationSettingInfo.prototype.getMuteReadBadgeCountInfosList = function() {
  return /** @type{!Array<!proto.douyin.MuteReadBadgeCountInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, MuteReadBadgeCountInfo_pb.MuteReadBadgeCountInfo, 17));
};


/**
 * @param {!Array<!proto.douyin.MuteReadBadgeCountInfo>} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
*/
proto.douyin.ConversationSettingInfo.prototype.setMuteReadBadgeCountInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.douyin.MuteReadBadgeCountInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.MuteReadBadgeCountInfo}
 */
proto.douyin.ConversationSettingInfo.prototype.addMuteReadBadgeCountInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.douyin.MuteReadBadgeCountInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.clearMuteReadBadgeCountInfosList = function() {
  return this.setMuteReadBadgeCountInfosList([]);
};


/**
 * optional int32 push_status = 30;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getPushStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setPushStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


goog.object.extend(exports, proto.douyin);
