// source: ConversationInfoV2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ParticipantsPage_pb = require('./ParticipantsPage_pb.js');
goog.object.extend(proto, ParticipantsPage_pb);
var MuteBadgeCountInfo_pb = require('./MuteBadgeCountInfo_pb.js');
goog.object.extend(proto, MuteBadgeCountInfo_pb);
var Participant_pb = require('./Participant_pb.js');
goog.object.extend(proto, Participant_pb);
var ConversationCoreInfo_pb = require('./ConversationCoreInfo_pb.js');
goog.object.extend(proto, ConversationCoreInfo_pb);
var ConversationSettingInfo_pb = require('./ConversationSettingInfo_pb.js');
goog.object.extend(proto, ConversationSettingInfo_pb);
var RobotInfo_pb = require('./RobotInfo_pb.js');
goog.object.extend(proto, RobotInfo_pb);
goog.exportSymbol('proto.douyin.ConversationInfoV2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ConversationInfoV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.ConversationInfoV2.repeatedFields_, null);
};
goog.inherits(proto.douyin.ConversationInfoV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ConversationInfoV2.displayName = 'proto.douyin.ConversationInfoV2';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.ConversationInfoV2.repeatedFields_ = [11,60];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ConversationInfoV2.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ConversationInfoV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ConversationInfoV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationInfoV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conversationShortId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conversationType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ticket: jspb.Message.getFieldWithDefault(msg, 4, ""),
    firstpageparticipant: (f = msg.getFirstpageparticipant()) && ParticipantsPage_pb.ParticipantsPage.toObject(includeInstance, f),
    participantscount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isParticipant: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    inboxType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    badgeCount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mutebadgeinfoList: jspb.Message.toObjectList(msg.getMutebadgeinfoList(),
    MuteBadgeCountInfo_pb.MuteBadgeCountInfo.toObject, includeInstance),
    userInfo: (f = msg.getUserInfo()) && Participant_pb.Participant.toObject(includeInstance, f),
    conversationcoreinfo: (f = msg.getConversationcoreinfo()) && ConversationCoreInfo_pb.ConversationCoreInfo.toObject(includeInstance, f),
    conversationsettinginfo: (f = msg.getConversationsettinginfo()) && ConversationSettingInfo_pb.ConversationSettingInfo.toObject(includeInstance, f),
    robotinfosList: jspb.Message.toObjectList(msg.getRobotinfosList(),
    RobotInfo_pb.RobotInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ConversationInfoV2}
 */
proto.douyin.ConversationInfoV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ConversationInfoV2;
  return proto.douyin.ConversationInfoV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ConversationInfoV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ConversationInfoV2}
 */
proto.douyin.ConversationInfoV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConversationShortId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    case 6:
      var value = new ParticipantsPage_pb.ParticipantsPage;
      reader.readMessage(value,ParticipantsPage_pb.ParticipantsPage.deserializeBinaryFromReader);
      msg.setFirstpageparticipant(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantscount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParticipant(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboxType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBadgeCount(value);
      break;
    case 11:
      var value = new MuteBadgeCountInfo_pb.MuteBadgeCountInfo;
      reader.readMessage(value,MuteBadgeCountInfo_pb.MuteBadgeCountInfo.deserializeBinaryFromReader);
      msg.addMutebadgeinfo(value);
      break;
    case 20:
      var value = new Participant_pb.Participant;
      reader.readMessage(value,Participant_pb.Participant.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 50:
      var value = new ConversationCoreInfo_pb.ConversationCoreInfo;
      reader.readMessage(value,ConversationCoreInfo_pb.ConversationCoreInfo.deserializeBinaryFromReader);
      msg.setConversationcoreinfo(value);
      break;
    case 51:
      var value = new ConversationSettingInfo_pb.ConversationSettingInfo;
      reader.readMessage(value,ConversationSettingInfo_pb.ConversationSettingInfo.deserializeBinaryFromReader);
      msg.setConversationsettinginfo(value);
      break;
    case 60:
      var value = new RobotInfo_pb.RobotInfo;
      reader.readMessage(value,RobotInfo_pb.RobotInfo.deserializeBinaryFromReader);
      msg.addRobotinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ConversationInfoV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ConversationInfoV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ConversationInfoV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationInfoV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationShortId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConversationType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFirstpageparticipant();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ParticipantsPage_pb.ParticipantsPage.serializeBinaryToWriter
    );
  }
  f = message.getParticipantscount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getIsParticipant();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getInboxType();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getBadgeCount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMutebadgeinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      MuteBadgeCountInfo_pb.MuteBadgeCountInfo.serializeBinaryToWriter
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      Participant_pb.Participant.serializeBinaryToWriter
    );
  }
  f = message.getConversationcoreinfo();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      ConversationCoreInfo_pb.ConversationCoreInfo.serializeBinaryToWriter
    );
  }
  f = message.getConversationsettinginfo();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      ConversationSettingInfo_pb.ConversationSettingInfo.serializeBinaryToWriter
    );
  }
  f = message.getRobotinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      60,
      f,
      RobotInfo_pb.RobotInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 conversation_short_id = 2;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationShortId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setConversationShortId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 conversation_type = 3;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setConversationType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ticket = 4;
 * @return {string}
 */
proto.douyin.ConversationInfoV2.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setTicket = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ParticipantsPage firstpageparticipant = 6;
 * @return {?proto.douyin.ParticipantsPage}
 */
proto.douyin.ConversationInfoV2.prototype.getFirstpageparticipant = function() {
  return /** @type{?proto.douyin.ParticipantsPage} */ (
    jspb.Message.getWrapperField(this, ParticipantsPage_pb.ParticipantsPage, 6));
};


/**
 * @param {?proto.douyin.ParticipantsPage|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setFirstpageparticipant = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearFirstpageparticipant = function() {
  return this.setFirstpageparticipant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasFirstpageparticipant = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 participantsCount = 7;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getParticipantscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setParticipantscount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool is_participant = 8;
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.getIsParticipant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setIsParticipant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 inbox_type = 9;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getInboxType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setInboxType = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 badge_count = 10;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getBadgeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setBadgeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated MuteBadgeCountInfo muteBadgeInfo = 11;
 * @return {!Array<!proto.douyin.MuteBadgeCountInfo>}
 */
proto.douyin.ConversationInfoV2.prototype.getMutebadgeinfoList = function() {
  return /** @type{!Array<!proto.douyin.MuteBadgeCountInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, MuteBadgeCountInfo_pb.MuteBadgeCountInfo, 11));
};


/**
 * @param {!Array<!proto.douyin.MuteBadgeCountInfo>} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setMutebadgeinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.douyin.MuteBadgeCountInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.MuteBadgeCountInfo}
 */
proto.douyin.ConversationInfoV2.prototype.addMutebadgeinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.douyin.MuteBadgeCountInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearMutebadgeinfoList = function() {
  return this.setMutebadgeinfoList([]);
};


/**
 * optional Participant user_info = 20;
 * @return {?proto.douyin.Participant}
 */
proto.douyin.ConversationInfoV2.prototype.getUserInfo = function() {
  return /** @type{?proto.douyin.Participant} */ (
    jspb.Message.getWrapperField(this, Participant_pb.Participant, 20));
};


/**
 * @param {?proto.douyin.Participant|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ConversationCoreInfo conversationCoreInfo = 50;
 * @return {?proto.douyin.ConversationCoreInfo}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationcoreinfo = function() {
  return /** @type{?proto.douyin.ConversationCoreInfo} */ (
    jspb.Message.getWrapperField(this, ConversationCoreInfo_pb.ConversationCoreInfo, 50));
};


/**
 * @param {?proto.douyin.ConversationCoreInfo|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setConversationcoreinfo = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearConversationcoreinfo = function() {
  return this.setConversationcoreinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasConversationcoreinfo = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional ConversationSettingInfo conversationSettingInfo = 51;
 * @return {?proto.douyin.ConversationSettingInfo}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationsettinginfo = function() {
  return /** @type{?proto.douyin.ConversationSettingInfo} */ (
    jspb.Message.getWrapperField(this, ConversationSettingInfo_pb.ConversationSettingInfo, 51));
};


/**
 * @param {?proto.douyin.ConversationSettingInfo|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setConversationsettinginfo = function(value) {
  return jspb.Message.setWrapperField(this, 51, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearConversationsettinginfo = function() {
  return this.setConversationsettinginfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasConversationsettinginfo = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * repeated RobotInfo robotInfos = 60;
 * @return {!Array<!proto.douyin.RobotInfo>}
 */
proto.douyin.ConversationInfoV2.prototype.getRobotinfosList = function() {
  return /** @type{!Array<!proto.douyin.RobotInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, RobotInfo_pb.RobotInfo, 60));
};


/**
 * @param {!Array<!proto.douyin.RobotInfo>} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setRobotinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 60, value);
};


/**
 * @param {!proto.douyin.RobotInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.RobotInfo}
 */
proto.douyin.ConversationInfoV2.prototype.addRobotinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 60, opt_value, proto.douyin.RobotInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearRobotinfosList = function() {
  return this.setRobotinfosList([]);
};


goog.object.extend(exports, proto.douyin);
