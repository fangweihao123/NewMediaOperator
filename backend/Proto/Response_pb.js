// source: conversationlist.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.douyin.ConversationCoreInfo', null, global);
goog.exportSymbol('proto.douyin.ConversationInfoV2', null, global);
goog.exportSymbol('proto.douyin.ConversationSettingInfo', null, global);
goog.exportSymbol('proto.douyin.GetUserConversationListResponseBody', null, global);
goog.exportSymbol('proto.douyin.MuteBadgeCountInfo', null, global);
goog.exportSymbol('proto.douyin.MuteReadBadgeCountInfo', null, global);
goog.exportSymbol('proto.douyin.Participant', null, global);
goog.exportSymbol('proto.douyin.ParticipantsPage', null, global);
goog.exportSymbol('proto.douyin.Response', null, global);
goog.exportSymbol('proto.douyin.ResponseBody', null, global);
goog.exportSymbol('proto.douyin.RobotInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Response.displayName = 'proto.douyin.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ResponseBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.douyin.ResponseBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ResponseBody.displayName = 'proto.douyin.ResponseBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.GetUserConversationListResponseBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.GetUserConversationListResponseBody.repeatedFields_, null);
};
goog.inherits(proto.douyin.GetUserConversationListResponseBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.GetUserConversationListResponseBody.displayName = 'proto.douyin.GetUserConversationListResponseBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ConversationInfoV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.ConversationInfoV2.repeatedFields_, null);
};
goog.inherits(proto.douyin.ConversationInfoV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ConversationInfoV2.displayName = 'proto.douyin.ConversationInfoV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ParticipantsPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.ParticipantsPage.repeatedFields_, null);
};
goog.inherits(proto.douyin.ParticipantsPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ParticipantsPage.displayName = 'proto.douyin.ParticipantsPage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.MuteBadgeCountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.MuteBadgeCountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.MuteBadgeCountInfo.displayName = 'proto.douyin.MuteBadgeCountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.Participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Participant.displayName = 'proto.douyin.Participant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ConversationCoreInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.ConversationCoreInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ConversationCoreInfo.displayName = 'proto.douyin.ConversationCoreInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ConversationSettingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.ConversationSettingInfo.repeatedFields_, null);
};
goog.inherits(proto.douyin.ConversationSettingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ConversationSettingInfo.displayName = 'proto.douyin.ConversationSettingInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.MuteReadBadgeCountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.MuteReadBadgeCountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.MuteReadBadgeCountInfo.displayName = 'proto.douyin.MuteReadBadgeCountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.RobotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.RobotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.RobotInfo.displayName = 'proto.douyin.RobotInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequenceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statusCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    errorDesc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    inboxType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    body: (f = msg.getBody()) && proto.douyin.ResponseBody.toObject(includeInstance, f),
    logId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    startTimeStamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    requestArrivedTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    serverExecutionEndTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    pdesKey: jspb.Message.getFieldWithDefault(msg, 110, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Response}
 */
proto.douyin.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Response;
  return proto.douyin.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Response}
 */
proto.douyin.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequenceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDesc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboxType(value);
      break;
    case 6:
      var value = new proto.douyin.ResponseBody;
      reader.readMessage(value,proto.douyin.ResponseBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogId(value);
      break;
    case 8:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTimeStamp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRequestArrivedTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerExecutionEndTime(value);
      break;
    case 110:
      var value = /** @type {string} */ (reader.readString());
      msg.setPdesKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequenceId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getErrorDesc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInboxType();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.douyin.ResponseBody.serializeBinaryToWriter
    );
  }
  f = message.getLogId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getStartTimeStamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getRequestArrivedTime();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getServerExecutionEndTime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getPdesKey();
  if (f.length > 0) {
    writer.writeString(
      110,
      f
    );
  }
};


/**
 * optional int32 cmd = 1;
 * @return {number}
 */
proto.douyin.Response.prototype.getCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setCmd = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 sequence_id = 2;
 * @return {number}
 */
proto.douyin.Response.prototype.getSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setSequenceId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 status_code = 3;
 * @return {number}
 */
proto.douyin.Response.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string error_desc = 4;
 * @return {string}
 */
proto.douyin.Response.prototype.getErrorDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setErrorDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 inbox_type = 5;
 * @return {number}
 */
proto.douyin.Response.prototype.getInboxType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setInboxType = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ResponseBody body = 6;
 * @return {?proto.douyin.ResponseBody}
 */
proto.douyin.Response.prototype.getBody = function() {
  return /** @type{?proto.douyin.ResponseBody} */ (
    jspb.Message.getWrapperField(this, proto.douyin.ResponseBody, 6));
};


/**
 * @param {?proto.douyin.ResponseBody|undefined} value
 * @return {!proto.douyin.Response} returns this
*/
proto.douyin.Response.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.Response.prototype.hasBody = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string log_id = 7;
 * @return {string}
 */
proto.douyin.Response.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setLogId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * map<string, string> headers = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.Response.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};


/**
 * optional int64 start_time_stamp = 9;
 * @return {number}
 */
proto.douyin.Response.prototype.getStartTimeStamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setStartTimeStamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 request_arrived_time = 10;
 * @return {number}
 */
proto.douyin.Response.prototype.getRequestArrivedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setRequestArrivedTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 server_execution_end_time = 11;
 * @return {number}
 */
proto.douyin.Response.prototype.getServerExecutionEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setServerExecutionEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string pdes_key = 110;
 * @return {string}
 */
proto.douyin.Response.prototype.getPdesKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 110, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setPdesKey = function(value) {
  return jspb.Message.setProto3StringField(this, 110, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ResponseBody.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ResponseBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ResponseBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ResponseBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationlistbody: (f = msg.getConversationlistbody()) && proto.douyin.GetUserConversationListResponseBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ResponseBody}
 */
proto.douyin.ResponseBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ResponseBody;
  return proto.douyin.ResponseBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ResponseBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ResponseBody}
 */
proto.douyin.ResponseBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2006:
      var value = new proto.douyin.GetUserConversationListResponseBody;
      reader.readMessage(value,proto.douyin.GetUserConversationListResponseBody.deserializeBinaryFromReader);
      msg.setConversationlistbody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ResponseBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ResponseBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ResponseBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ResponseBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationlistbody();
  if (f != null) {
    writer.writeMessage(
      2006,
      f,
      proto.douyin.GetUserConversationListResponseBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetUserConversationListResponseBody conversationListBody = 2006;
 * @return {?proto.douyin.GetUserConversationListResponseBody}
 */
proto.douyin.ResponseBody.prototype.getConversationlistbody = function() {
  return /** @type{?proto.douyin.GetUserConversationListResponseBody} */ (
    jspb.Message.getWrapperField(this, proto.douyin.GetUserConversationListResponseBody, 2006));
};


/**
 * @param {?proto.douyin.GetUserConversationListResponseBody|undefined} value
 * @return {!proto.douyin.ResponseBody} returns this
*/
proto.douyin.ResponseBody.prototype.setConversationlistbody = function(value) {
  return jspb.Message.setWrapperField(this, 2006, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ResponseBody} returns this
 */
proto.douyin.ResponseBody.prototype.clearConversationlistbody = function() {
  return this.setConversationlistbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ResponseBody.prototype.hasConversationlistbody = function() {
  return jspb.Message.getField(this, 2006) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.GetUserConversationListResponseBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.GetUserConversationListResponseBody.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.GetUserConversationListResponseBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.GetUserConversationListResponseBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GetUserConversationListResponseBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageslistList: jspb.Message.toObjectList(msg.getMessageslistList(),
    proto.douyin.ConversationInfoV2.toObject, includeInstance),
    hasmore: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    nextCursor: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.GetUserConversationListResponseBody}
 */
proto.douyin.GetUserConversationListResponseBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.GetUserConversationListResponseBody;
  return proto.douyin.GetUserConversationListResponseBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.GetUserConversationListResponseBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.GetUserConversationListResponseBody}
 */
proto.douyin.GetUserConversationListResponseBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.douyin.ConversationInfoV2;
      reader.readMessage(value,proto.douyin.ConversationInfoV2.deserializeBinaryFromReader);
      msg.addMessageslist(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasmore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.GetUserConversationListResponseBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.GetUserConversationListResponseBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.GetUserConversationListResponseBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GetUserConversationListResponseBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageslistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.douyin.ConversationInfoV2.serializeBinaryToWriter
    );
  }
  f = message.getHasmore();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNextCursor();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated ConversationInfoV2 messagesList = 1;
 * @return {!Array<!proto.douyin.ConversationInfoV2>}
 */
proto.douyin.GetUserConversationListResponseBody.prototype.getMessageslistList = function() {
  return /** @type{!Array<!proto.douyin.ConversationInfoV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.ConversationInfoV2, 1));
};


/**
 * @param {!Array<!proto.douyin.ConversationInfoV2>} value
 * @return {!proto.douyin.GetUserConversationListResponseBody} returns this
*/
proto.douyin.GetUserConversationListResponseBody.prototype.setMessageslistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.douyin.ConversationInfoV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.ConversationInfoV2}
 */
proto.douyin.GetUserConversationListResponseBody.prototype.addMessageslist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.douyin.ConversationInfoV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.GetUserConversationListResponseBody} returns this
 */
proto.douyin.GetUserConversationListResponseBody.prototype.clearMessageslistList = function() {
  return this.setMessageslistList([]);
};


/**
 * optional bool hasMore = 2;
 * @return {boolean}
 */
proto.douyin.GetUserConversationListResponseBody.prototype.getHasmore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.GetUserConversationListResponseBody} returns this
 */
proto.douyin.GetUserConversationListResponseBody.prototype.setHasmore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 next_Cursor = 3;
 * @return {number}
 */
proto.douyin.GetUserConversationListResponseBody.prototype.getNextCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.GetUserConversationListResponseBody} returns this
 */
proto.douyin.GetUserConversationListResponseBody.prototype.setNextCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.ConversationInfoV2.repeatedFields_ = [11,60];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ConversationInfoV2.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ConversationInfoV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ConversationInfoV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationInfoV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conversationShortId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conversationType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ticket: jspb.Message.getFieldWithDefault(msg, 4, ""),
    firstpageparticipant: (f = msg.getFirstpageparticipant()) && proto.douyin.ParticipantsPage.toObject(includeInstance, f),
    participantscount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isParticipant: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    inboxType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    badgeCount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mutebadgeinfoList: jspb.Message.toObjectList(msg.getMutebadgeinfoList(),
    proto.douyin.MuteBadgeCountInfo.toObject, includeInstance),
    userInfo: (f = msg.getUserInfo()) && proto.douyin.Participant.toObject(includeInstance, f),
    conversationcoreinfo: (f = msg.getConversationcoreinfo()) && proto.douyin.ConversationCoreInfo.toObject(includeInstance, f),
    conversationsettinginfo: (f = msg.getConversationsettinginfo()) && proto.douyin.ConversationSettingInfo.toObject(includeInstance, f),
    robotinfosList: jspb.Message.toObjectList(msg.getRobotinfosList(),
    proto.douyin.RobotInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ConversationInfoV2}
 */
proto.douyin.ConversationInfoV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ConversationInfoV2;
  return proto.douyin.ConversationInfoV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ConversationInfoV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ConversationInfoV2}
 */
proto.douyin.ConversationInfoV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConversationShortId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    case 6:
      var value = new proto.douyin.ParticipantsPage;
      reader.readMessage(value,proto.douyin.ParticipantsPage.deserializeBinaryFromReader);
      msg.setFirstpageparticipant(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantscount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParticipant(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboxType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBadgeCount(value);
      break;
    case 11:
      var value = new proto.douyin.MuteBadgeCountInfo;
      reader.readMessage(value,proto.douyin.MuteBadgeCountInfo.deserializeBinaryFromReader);
      msg.addMutebadgeinfo(value);
      break;
    case 20:
      var value = new proto.douyin.Participant;
      reader.readMessage(value,proto.douyin.Participant.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 50:
      var value = new proto.douyin.ConversationCoreInfo;
      reader.readMessage(value,proto.douyin.ConversationCoreInfo.deserializeBinaryFromReader);
      msg.setConversationcoreinfo(value);
      break;
    case 51:
      var value = new proto.douyin.ConversationSettingInfo;
      reader.readMessage(value,proto.douyin.ConversationSettingInfo.deserializeBinaryFromReader);
      msg.setConversationsettinginfo(value);
      break;
    case 60:
      var value = new proto.douyin.RobotInfo;
      reader.readMessage(value,proto.douyin.RobotInfo.deserializeBinaryFromReader);
      msg.addRobotinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ConversationInfoV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ConversationInfoV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ConversationInfoV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationInfoV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationShortId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConversationType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFirstpageparticipant();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.douyin.ParticipantsPage.serializeBinaryToWriter
    );
  }
  f = message.getParticipantscount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getIsParticipant();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getInboxType();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getBadgeCount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMutebadgeinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.douyin.MuteBadgeCountInfo.serializeBinaryToWriter
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.douyin.Participant.serializeBinaryToWriter
    );
  }
  f = message.getConversationcoreinfo();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.douyin.ConversationCoreInfo.serializeBinaryToWriter
    );
  }
  f = message.getConversationsettinginfo();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.douyin.ConversationSettingInfo.serializeBinaryToWriter
    );
  }
  f = message.getRobotinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      60,
      f,
      proto.douyin.RobotInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 conversation_short_id = 2;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationShortId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setConversationShortId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 conversation_type = 3;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setConversationType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ticket = 4;
 * @return {string}
 */
proto.douyin.ConversationInfoV2.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setTicket = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ParticipantsPage firstpageparticipant = 6;
 * @return {?proto.douyin.ParticipantsPage}
 */
proto.douyin.ConversationInfoV2.prototype.getFirstpageparticipant = function() {
  return /** @type{?proto.douyin.ParticipantsPage} */ (
    jspb.Message.getWrapperField(this, proto.douyin.ParticipantsPage, 6));
};


/**
 * @param {?proto.douyin.ParticipantsPage|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setFirstpageparticipant = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearFirstpageparticipant = function() {
  return this.setFirstpageparticipant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasFirstpageparticipant = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 participantsCount = 7;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getParticipantscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setParticipantscount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool is_participant = 8;
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.getIsParticipant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setIsParticipant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 inbox_type = 9;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getInboxType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setInboxType = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 badge_count = 10;
 * @return {number}
 */
proto.douyin.ConversationInfoV2.prototype.getBadgeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.setBadgeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated MuteBadgeCountInfo muteBadgeInfo = 11;
 * @return {!Array<!proto.douyin.MuteBadgeCountInfo>}
 */
proto.douyin.ConversationInfoV2.prototype.getMutebadgeinfoList = function() {
  return /** @type{!Array<!proto.douyin.MuteBadgeCountInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.MuteBadgeCountInfo, 11));
};


/**
 * @param {!Array<!proto.douyin.MuteBadgeCountInfo>} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setMutebadgeinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.douyin.MuteBadgeCountInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.MuteBadgeCountInfo}
 */
proto.douyin.ConversationInfoV2.prototype.addMutebadgeinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.douyin.MuteBadgeCountInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearMutebadgeinfoList = function() {
  return this.setMutebadgeinfoList([]);
};


/**
 * optional Participant user_info = 20;
 * @return {?proto.douyin.Participant}
 */
proto.douyin.ConversationInfoV2.prototype.getUserInfo = function() {
  return /** @type{?proto.douyin.Participant} */ (
    jspb.Message.getWrapperField(this, proto.douyin.Participant, 20));
};


/**
 * @param {?proto.douyin.Participant|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ConversationCoreInfo conversationCoreInfo = 50;
 * @return {?proto.douyin.ConversationCoreInfo}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationcoreinfo = function() {
  return /** @type{?proto.douyin.ConversationCoreInfo} */ (
    jspb.Message.getWrapperField(this, proto.douyin.ConversationCoreInfo, 50));
};


/**
 * @param {?proto.douyin.ConversationCoreInfo|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setConversationcoreinfo = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearConversationcoreinfo = function() {
  return this.setConversationcoreinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasConversationcoreinfo = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional ConversationSettingInfo conversationSettingInfo = 51;
 * @return {?proto.douyin.ConversationSettingInfo}
 */
proto.douyin.ConversationInfoV2.prototype.getConversationsettinginfo = function() {
  return /** @type{?proto.douyin.ConversationSettingInfo} */ (
    jspb.Message.getWrapperField(this, proto.douyin.ConversationSettingInfo, 51));
};


/**
 * @param {?proto.douyin.ConversationSettingInfo|undefined} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setConversationsettinginfo = function(value) {
  return jspb.Message.setWrapperField(this, 51, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearConversationsettinginfo = function() {
  return this.setConversationsettinginfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ConversationInfoV2.prototype.hasConversationsettinginfo = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * repeated RobotInfo robotInfos = 60;
 * @return {!Array<!proto.douyin.RobotInfo>}
 */
proto.douyin.ConversationInfoV2.prototype.getRobotinfosList = function() {
  return /** @type{!Array<!proto.douyin.RobotInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.RobotInfo, 60));
};


/**
 * @param {!Array<!proto.douyin.RobotInfo>} value
 * @return {!proto.douyin.ConversationInfoV2} returns this
*/
proto.douyin.ConversationInfoV2.prototype.setRobotinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 60, value);
};


/**
 * @param {!proto.douyin.RobotInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.RobotInfo}
 */
proto.douyin.ConversationInfoV2.prototype.addRobotinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 60, opt_value, proto.douyin.RobotInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ConversationInfoV2} returns this
 */
proto.douyin.ConversationInfoV2.prototype.clearRobotinfosList = function() {
  return this.setRobotinfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.ParticipantsPage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ParticipantsPage.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ParticipantsPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ParticipantsPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ParticipantsPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.douyin.Participant.toObject, includeInstance),
    hasmore: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    cursor: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ParticipantsPage}
 */
proto.douyin.ParticipantsPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ParticipantsPage;
  return proto.douyin.ParticipantsPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ParticipantsPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ParticipantsPage}
 */
proto.douyin.ParticipantsPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.douyin.Participant;
      reader.readMessage(value,proto.douyin.Participant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasmore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ParticipantsPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ParticipantsPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ParticipantsPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ParticipantsPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.douyin.Participant.serializeBinaryToWriter
    );
  }
  f = message.getHasmore();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated Participant participants = 1;
 * @return {!Array<!proto.douyin.Participant>}
 */
proto.douyin.ParticipantsPage.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.douyin.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.Participant, 1));
};


/**
 * @param {!Array<!proto.douyin.Participant>} value
 * @return {!proto.douyin.ParticipantsPage} returns this
*/
proto.douyin.ParticipantsPage.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.douyin.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.Participant}
 */
proto.douyin.ParticipantsPage.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.douyin.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ParticipantsPage} returns this
 */
proto.douyin.ParticipantsPage.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional bool hasMore = 2;
 * @return {boolean}
 */
proto.douyin.ParticipantsPage.prototype.getHasmore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.ParticipantsPage} returns this
 */
proto.douyin.ParticipantsPage.prototype.setHasmore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 cursor = 3;
 * @return {number}
 */
proto.douyin.ParticipantsPage.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ParticipantsPage} returns this
 */
proto.douyin.ParticipantsPage.prototype.setCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.MuteBadgeCountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.MuteBadgeCountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.MuteBadgeCountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.MuteBadgeCountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    badgeCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.MuteBadgeCountInfo}
 */
proto.douyin.MuteBadgeCountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.MuteBadgeCountInfo;
  return proto.douyin.MuteBadgeCountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.MuteBadgeCountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.MuteBadgeCountInfo}
 */
proto.douyin.MuteBadgeCountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBadgeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.MuteBadgeCountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.MuteBadgeCountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.MuteBadgeCountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.MuteBadgeCountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBadgeCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 message_type = 1;
 * @return {number}
 */
proto.douyin.MuteBadgeCountInfo.prototype.getMessageType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.MuteBadgeCountInfo} returns this
 */
proto.douyin.MuteBadgeCountInfo.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 badge_count = 2;
 * @return {number}
 */
proto.douyin.MuteBadgeCountInfo.prototype.getBadgeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.MuteBadgeCountInfo} returns this
 */
proto.douyin.MuteBadgeCountInfo.prototype.setBadgeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Participant.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sortOrder: jspb.Message.getFieldWithDefault(msg, 2, 0),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0),
    alias: jspb.Message.getFieldWithDefault(msg, 4, ""),
    secUid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    blocked: jspb.Message.getFieldWithDefault(msg, 6, 0),
    leftBlockTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    extMap: (f = msg.getExtMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Participant}
 */
proto.douyin.Participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Participant;
  return proto.douyin.Participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Participant}
 */
proto.douyin.Participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSortOrder(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecUid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlocked(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLeftBlockTime(value);
      break;
    case 8:
      var value = msg.getExtMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSortOrder();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecUid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBlocked();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getLeftBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getExtMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.douyin.Participant.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 sort_order = 2;
 * @return {number}
 */
proto.douyin.Participant.prototype.getSortOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setSortOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 role = 3;
 * @return {number}
 */
proto.douyin.Participant.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string alias = 4;
 * @return {string}
 */
proto.douyin.Participant.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sec_uid = 5;
 * @return {string}
 */
proto.douyin.Participant.prototype.getSecUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setSecUid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 blocked = 6;
 * @return {number}
 */
proto.douyin.Participant.prototype.getBlocked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setBlocked = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 left_block_time = 7;
 * @return {number}
 */
proto.douyin.Participant.prototype.getLeftBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.setLeftBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * map<string, string> ext = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.Participant.prototype.getExtMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.Participant} returns this
 */
proto.douyin.Participant.prototype.clearExtMap = function() {
  this.getExtMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ConversationCoreInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ConversationCoreInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ConversationCoreInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationCoreInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conversationShortId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conversationType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    infoVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 6, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 7, ""),
    inboxType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    notice: jspb.Message.getFieldWithDefault(msg, 9, ""),
    extMap: (f = msg.getExtMap()) ? f.toObject(includeInstance, undefined) : [],
    owner: jspb.Message.getFieldWithDefault(msg, 12, 0),
    secOwner: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ConversationCoreInfo}
 */
proto.douyin.ConversationCoreInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ConversationCoreInfo;
  return proto.douyin.ConversationCoreInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ConversationCoreInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ConversationCoreInfo}
 */
proto.douyin.ConversationCoreInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConversationShortId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInfoVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboxType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotice(value);
      break;
    case 11:
      var value = msg.getExtMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwner(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ConversationCoreInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ConversationCoreInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ConversationCoreInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationCoreInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationShortId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConversationType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInfoVersion();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInboxType();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getNotice();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getExtMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOwner();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getSecOwner();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.douyin.ConversationCoreInfo.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 conversation_short_id = 2;
 * @return {number}
 */
proto.douyin.ConversationCoreInfo.prototype.getConversationShortId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setConversationShortId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 conversation_type = 3;
 * @return {number}
 */
proto.douyin.ConversationCoreInfo.prototype.getConversationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setConversationType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 info_version = 4;
 * @return {number}
 */
proto.douyin.ConversationCoreInfo.prototype.getInfoVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setInfoVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.douyin.ConversationCoreInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string desc = 6;
 * @return {string}
 */
proto.douyin.ConversationCoreInfo.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string icon = 7;
 * @return {string}
 */
proto.douyin.ConversationCoreInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 inbox_type = 8;
 * @return {number}
 */
proto.douyin.ConversationCoreInfo.prototype.getInboxType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setInboxType = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string notice = 9;
 * @return {string}
 */
proto.douyin.ConversationCoreInfo.prototype.getNotice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setNotice = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * map<string, string> ext = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.ConversationCoreInfo.prototype.getExtMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.clearExtMap = function() {
  this.getExtMap().clear();
  return this;};


/**
 * optional int64 owner = 12;
 * @return {number}
 */
proto.douyin.ConversationCoreInfo.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setOwner = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string sec_owner = 13;
 * @return {string}
 */
proto.douyin.ConversationCoreInfo.prototype.getSecOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationCoreInfo} returns this
 */
proto.douyin.ConversationCoreInfo.prototype.setSecOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.ConversationSettingInfo.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ConversationSettingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ConversationSettingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ConversationSettingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationSettingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conversationShortId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    conversationType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    readIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mute: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stickOnTop: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inboxType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    extMap: (f = msg.getExtMap()) ? f.toObject(includeInstance, undefined) : [],
    settingVersion: jspb.Message.getFieldWithDefault(msg, 10, 0),
    favorite: jspb.Message.getFieldWithDefault(msg, 11, 0),
    setTopTime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    setFavoriteTime: jspb.Message.getFieldWithDefault(msg, 13, 0),
    readIndexV2: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minIndexV2: jspb.Message.getFieldWithDefault(msg, 15, 0),
    readBadgeCount: jspb.Message.getFieldWithDefault(msg, 16, 0),
    muteReadBadgeCountInfosList: jspb.Message.toObjectList(msg.getMuteReadBadgeCountInfosList(),
    proto.douyin.MuteReadBadgeCountInfo.toObject, includeInstance),
    pushStatus: jspb.Message.getFieldWithDefault(msg, 30, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ConversationSettingInfo}
 */
proto.douyin.ConversationSettingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ConversationSettingInfo;
  return proto.douyin.ConversationSettingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ConversationSettingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ConversationSettingInfo}
 */
proto.douyin.ConversationSettingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConversationShortId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMute(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStickOnTop(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboxType(value);
      break;
    case 9:
      var value = msg.getExtMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSettingVersion(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFavorite(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSetTopTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSetFavoriteTime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadIndexV2(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinIndexV2(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReadBadgeCount(value);
      break;
    case 17:
      var value = new proto.douyin.MuteReadBadgeCountInfo;
      reader.readMessage(value,proto.douyin.MuteReadBadgeCountInfo.deserializeBinaryFromReader);
      msg.addMuteReadBadgeCountInfos(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPushStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ConversationSettingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ConversationSettingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ConversationSettingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ConversationSettingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationShortId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConversationType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMinIndex();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getReadIndex();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMute();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getStickOnTop();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInboxType();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getExtMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSettingVersion();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getFavorite();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getSetTopTime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getSetFavoriteTime();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getReadIndexV2();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getMinIndexV2();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getReadBadgeCount();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMuteReadBadgeCountInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.douyin.MuteReadBadgeCountInfo.serializeBinaryToWriter
    );
  }
  f = message.getPushStatus();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
};


/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.douyin.ConversationSettingInfo.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 conversation_short_id = 2;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getConversationShortId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setConversationShortId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 conversation_type = 3;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getConversationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setConversationType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 min_index = 4;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getMinIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setMinIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 read_index = 5;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getReadIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setReadIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 mute = 6;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getMute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setMute = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 stick_on_top = 7;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getStickOnTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setStickOnTop = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 inbox_type = 8;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getInboxType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setInboxType = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> ext = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.ConversationSettingInfo.prototype.getExtMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.clearExtMap = function() {
  this.getExtMap().clear();
  return this;};


/**
 * optional int64 setting_version = 10;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getSettingVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setSettingVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 favorite = 11;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getFavorite = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setFavorite = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 set_top_time = 12;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getSetTopTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setSetTopTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 set_favorite_time = 13;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getSetFavoriteTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setSetFavoriteTime = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 read_index_v2 = 14;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getReadIndexV2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setReadIndexV2 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 min_index_v2 = 15;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getMinIndexV2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setMinIndexV2 = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 read_badge_count = 16;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getReadBadgeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setReadBadgeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated MuteReadBadgeCountInfo mute_read_badge_count_infos = 17;
 * @return {!Array<!proto.douyin.MuteReadBadgeCountInfo>}
 */
proto.douyin.ConversationSettingInfo.prototype.getMuteReadBadgeCountInfosList = function() {
  return /** @type{!Array<!proto.douyin.MuteReadBadgeCountInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.MuteReadBadgeCountInfo, 17));
};


/**
 * @param {!Array<!proto.douyin.MuteReadBadgeCountInfo>} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
*/
proto.douyin.ConversationSettingInfo.prototype.setMuteReadBadgeCountInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.douyin.MuteReadBadgeCountInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.MuteReadBadgeCountInfo}
 */
proto.douyin.ConversationSettingInfo.prototype.addMuteReadBadgeCountInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.douyin.MuteReadBadgeCountInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.clearMuteReadBadgeCountInfosList = function() {
  return this.setMuteReadBadgeCountInfosList([]);
};


/**
 * optional int32 push_status = 30;
 * @return {number}
 */
proto.douyin.ConversationSettingInfo.prototype.getPushStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.ConversationSettingInfo} returns this
 */
proto.douyin.ConversationSettingInfo.prototype.setPushStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.MuteReadBadgeCountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.MuteReadBadgeCountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.MuteReadBadgeCountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.MuteReadBadgeCountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    readBadgeCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.MuteReadBadgeCountInfo}
 */
proto.douyin.MuteReadBadgeCountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.MuteReadBadgeCountInfo;
  return proto.douyin.MuteReadBadgeCountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.MuteReadBadgeCountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.MuteReadBadgeCountInfo}
 */
proto.douyin.MuteReadBadgeCountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReadBadgeCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.MuteReadBadgeCountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.MuteReadBadgeCountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.MuteReadBadgeCountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.MuteReadBadgeCountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReadBadgeCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 message_type = 1;
 * @return {number}
 */
proto.douyin.MuteReadBadgeCountInfo.prototype.getMessageType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.MuteReadBadgeCountInfo} returns this
 */
proto.douyin.MuteReadBadgeCountInfo.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 read_badge_count = 2;
 * @return {number}
 */
proto.douyin.MuteReadBadgeCountInfo.prototype.getReadBadgeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.MuteReadBadgeCountInfo} returns this
 */
proto.douyin.MuteReadBadgeCountInfo.prototype.setReadBadgeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.RobotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.RobotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.RobotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.RobotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    secUid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    extMap: (f = msg.getExtMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.RobotInfo}
 */
proto.douyin.RobotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.RobotInfo;
  return proto.douyin.RobotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.RobotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.RobotInfo}
 */
proto.douyin.RobotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecUid(value);
      break;
    case 99:
      var value = msg.getExtMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.RobotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.RobotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.RobotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.RobotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSecUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExtMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(99, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.douyin.RobotInfo.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.RobotInfo} returns this
 */
proto.douyin.RobotInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sec_uid = 2;
 * @return {string}
 */
proto.douyin.RobotInfo.prototype.getSecUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.RobotInfo} returns this
 */
proto.douyin.RobotInfo.prototype.setSecUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> ext = 99;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.RobotInfo.prototype.getExtMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 99, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.RobotInfo} returns this
 */
proto.douyin.RobotInfo.prototype.clearExtMap = function() {
  this.getExtMap().clear();
  return this;};


goog.object.extend(exports, proto.douyin);
