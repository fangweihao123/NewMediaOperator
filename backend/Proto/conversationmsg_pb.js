// source: conversationmsg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.im.ExtInfo', null, global);
goog.exportSymbol('proto.im.Message', null, global);
goog.exportSymbol('proto.im.MessageContainer', null, global);
goog.exportSymbol('proto.im.MessageContainer.MessageData', null, global);
goog.exportSymbol('proto.im.MessageContent', null, global);
goog.exportSymbol('proto.im.Participant', null, global);
goog.exportSymbol('proto.im.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.Response.displayName = 'proto.im.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.MessageContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.im.MessageContainer.repeatedFields_, null);
};
goog.inherits(proto.im.MessageContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.MessageContainer.displayName = 'proto.im.MessageContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.MessageContainer.MessageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.MessageContainer.MessageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.MessageContainer.MessageData.displayName = 'proto.im.MessageContainer.MessageData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.im.Message.repeatedFields_, null);
};
goog.inherits(proto.im.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.Message.displayName = 'proto.im.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.MessageContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.im.MessageContent.repeatedFields_, null);
};
goog.inherits(proto.im.MessageContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.MessageContent.displayName = 'proto.im.MessageContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.ExtInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.ExtInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.ExtInfo.displayName = 'proto.im.ExtInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.Participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.Participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.im.Participant.displayName = 'proto.im.Participant';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.im.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    logId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    container: (f = msg.getContainer()) && proto.im.MessageContainer.toObject(includeInstance, f),
    requestId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serverTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    clientTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.Response}
 */
proto.im.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.Response;
  return proto.im.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.Response}
 */
proto.im.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogId(value);
      break;
    case 6:
      var value = new proto.im.MessageContainer;
      reader.readMessage(value,proto.im.MessageContainer.deserializeBinaryFromReader);
      msg.setContainer(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLogId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getContainer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.im.MessageContainer.serializeBinaryToWriter
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServerTime();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getClientTime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.im.Response.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 status_code = 2;
 * @return {number}
 */
proto.im.Response.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 error_code = 3;
 * @return {number}
 */
proto.im.Response.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.im.Response.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 log_id = 5;
 * @return {number}
 */
proto.im.Response.prototype.getLogId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setLogId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional MessageContainer container = 6;
 * @return {?proto.im.MessageContainer}
 */
proto.im.Response.prototype.getContainer = function() {
  return /** @type{?proto.im.MessageContainer} */ (
    jspb.Message.getWrapperField(this, proto.im.MessageContainer, 6));
};


/**
 * @param {?proto.im.MessageContainer|undefined} value
 * @return {!proto.im.Response} returns this
*/
proto.im.Response.prototype.setContainer = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.clearContainer = function() {
  return this.setContainer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.im.Response.prototype.hasContainer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string request_id = 7;
 * @return {string}
 */
proto.im.Response.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 server_time = 10;
 * @return {number}
 */
proto.im.Response.prototype.getServerTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setServerTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 client_time = 11;
 * @return {number}
 */
proto.im.Response.prototype.getClientTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setClientTime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 user_id = 13;
 * @return {number}
 */
proto.im.Response.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Response} returns this
 */
proto.im.Response.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.im.MessageContainer.repeatedFields_ = [1000];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.MessageContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.im.MessageContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.MessageContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.MessageContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.im.MessageContainer.MessageData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.MessageContainer}
 */
proto.im.MessageContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.MessageContainer;
  return proto.im.MessageContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.MessageContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.MessageContainer}
 */
proto.im.MessageContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1000:
      var value = new proto.im.MessageContainer.MessageData;
      reader.readMessage(value,proto.im.MessageContainer.MessageData.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.MessageContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.MessageContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.MessageContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.MessageContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1000,
      f,
      proto.im.MessageContainer.MessageData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.MessageContainer.MessageData.prototype.toObject = function(opt_includeInstance) {
  return proto.im.MessageContainer.MessageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.MessageContainer.MessageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.MessageContainer.MessageData.toObject = function(includeInstance, msg) {
  var f, obj = {
    field1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    field2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    field3: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: (f = msg.getMessage()) && proto.im.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.MessageContainer.MessageData}
 */
proto.im.MessageContainer.MessageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.MessageContainer.MessageData;
  return proto.im.MessageContainer.MessageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.MessageContainer.MessageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.MessageContainer.MessageData}
 */
proto.im.MessageContainer.MessageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField3(value);
      break;
    case 4:
      var value = new proto.im.Message;
      reader.readMessage(value,proto.im.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.MessageContainer.MessageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.MessageContainer.MessageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.MessageContainer.MessageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.MessageContainer.MessageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField1();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getField2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getField3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.im.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 field1 = 1;
 * @return {number}
 */
proto.im.MessageContainer.MessageData.prototype.getField1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContainer.MessageData} returns this
 */
proto.im.MessageContainer.MessageData.prototype.setField1 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 field2 = 2;
 * @return {number}
 */
proto.im.MessageContainer.MessageData.prototype.getField2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContainer.MessageData} returns this
 */
proto.im.MessageContainer.MessageData.prototype.setField2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 field3 = 3;
 * @return {number}
 */
proto.im.MessageContainer.MessageData.prototype.getField3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContainer.MessageData} returns this
 */
proto.im.MessageContainer.MessageData.prototype.setField3 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Message message = 4;
 * @return {?proto.im.Message}
 */
proto.im.MessageContainer.MessageData.prototype.getMessage = function() {
  return /** @type{?proto.im.Message} */ (
    jspb.Message.getWrapperField(this, proto.im.Message, 4));
};


/**
 * @param {?proto.im.Message|undefined} value
 * @return {!proto.im.MessageContainer.MessageData} returns this
*/
proto.im.MessageContainer.MessageData.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.im.MessageContainer.MessageData} returns this
 */
proto.im.MessageContainer.MessageData.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.im.MessageContainer.MessageData.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated MessageData messages = 1000;
 * @return {!Array<!proto.im.MessageContainer.MessageData>}
 */
proto.im.MessageContainer.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.im.MessageContainer.MessageData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.im.MessageContainer.MessageData, 1000));
};


/**
 * @param {!Array<!proto.im.MessageContainer.MessageData>} value
 * @return {!proto.im.MessageContainer} returns this
*/
proto.im.MessageContainer.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1000, value);
};


/**
 * @param {!proto.im.MessageContainer.MessageData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.im.MessageContainer.MessageData}
 */
proto.im.MessageContainer.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1000, opt_value, proto.im.MessageContainer.MessageData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.im.MessageContainer} returns this
 */
proto.im.MessageContainer.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.im.Message.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.im.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: (f = msg.getContent()) && proto.im.MessageContent.toObject(includeInstance, f),
    conversationId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.im.Participant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.Message}
 */
proto.im.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.Message;
  return proto.im.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.Message}
 */
proto.im.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.im.MessageContent;
      reader.readMessage(value,proto.im.MessageContent.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 5:
      var value = new proto.im.Participant;
      reader.readMessage(value,proto.im.Participant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.im.MessageContent.serializeBinaryToWriter
    );
  }
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.im.Participant.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 message_id = 1;
 * @return {number}
 */
proto.im.Message.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Message} returns this
 */
proto.im.Message.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.im.Message.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Message} returns this
 */
proto.im.Message.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MessageContent content = 3;
 * @return {?proto.im.MessageContent}
 */
proto.im.Message.prototype.getContent = function() {
  return /** @type{?proto.im.MessageContent} */ (
    jspb.Message.getWrapperField(this, proto.im.MessageContent, 3));
};


/**
 * @param {?proto.im.MessageContent|undefined} value
 * @return {!proto.im.Message} returns this
*/
proto.im.Message.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.im.Message} returns this
 */
proto.im.Message.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.im.Message.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string conversation_id = 4;
 * @return {string}
 */
proto.im.Message.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.Message} returns this
 */
proto.im.Message.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Participant participants = 5;
 * @return {!Array<!proto.im.Participant>}
 */
proto.im.Message.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.im.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.im.Participant, 5));
};


/**
 * @param {!Array<!proto.im.Participant>} value
 * @return {!proto.im.Message} returns this
*/
proto.im.Message.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.im.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.im.Participant}
 */
proto.im.Message.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.im.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.im.Message} returns this
 */
proto.im.Message.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.im.MessageContent.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.MessageContent.prototype.toObject = function(opt_includeInstance) {
  return proto.im.MessageContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.MessageContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.MessageContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conversationType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverMessageId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    createTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    messageId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    messageType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    senderId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    content: jspb.Message.getFieldWithDefault(msg, 8, ""),
    extInfoList: jspb.Message.toObjectList(msg.getExtInfoList(),
    proto.im.ExtInfo.toObject, includeInstance),
    clientTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    status: jspb.Message.getFieldWithDefault(msg, 11, 0),
    visibleType: jspb.Message.getFieldWithDefault(msg, 12, 0),
    createTimeNs: jspb.Message.getFieldWithDefault(msg, 13, 0),
    senderUid: jspb.Message.getFieldWithDefault(msg, 14, ""),
    conversationShortId: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.MessageContent}
 */
proto.im.MessageContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.MessageContent;
  return proto.im.MessageContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.MessageContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.MessageContent}
 */
proto.im.MessageContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerMessageId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 9:
      var value = new proto.im.ExtInfo;
      reader.readMessage(value,proto.im.ExtInfo.deserializeBinaryFromReader);
      msg.addExtInfo(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVisibleType(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTimeNs(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderUid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationShortId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.MessageContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.MessageContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.MessageContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.MessageContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServerMessageId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMessageType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSenderId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getExtInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.im.ExtInfo.serializeBinaryToWriter
    );
  }
  f = message.getClientTime();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getVisibleType();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getCreateTimeNs();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getSenderUid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getConversationShortId();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
};


/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.im.MessageContent.prototype.getConversationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setConversationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 conversation_type = 2;
 * @return {number}
 */
proto.im.MessageContent.prototype.getConversationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setConversationType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 server_message_id = 3;
 * @return {number}
 */
proto.im.MessageContent.prototype.getServerMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setServerMessageId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 create_time = 4;
 * @return {number}
 */
proto.im.MessageContent.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 message_id = 5;
 * @return {number}
 */
proto.im.MessageContent.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 message_type = 6;
 * @return {number}
 */
proto.im.MessageContent.prototype.getMessageType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 sender_id = 7;
 * @return {number}
 */
proto.im.MessageContent.prototype.getSenderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setSenderId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string content = 8;
 * @return {string}
 */
proto.im.MessageContent.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated ExtInfo ext_info = 9;
 * @return {!Array<!proto.im.ExtInfo>}
 */
proto.im.MessageContent.prototype.getExtInfoList = function() {
  return /** @type{!Array<!proto.im.ExtInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.im.ExtInfo, 9));
};


/**
 * @param {!Array<!proto.im.ExtInfo>} value
 * @return {!proto.im.MessageContent} returns this
*/
proto.im.MessageContent.prototype.setExtInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.im.ExtInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.im.ExtInfo}
 */
proto.im.MessageContent.prototype.addExtInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.im.ExtInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.clearExtInfoList = function() {
  return this.setExtInfoList([]);
};


/**
 * optional int64 client_time = 10;
 * @return {number}
 */
proto.im.MessageContent.prototype.getClientTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setClientTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 status = 11;
 * @return {number}
 */
proto.im.MessageContent.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 visible_type = 12;
 * @return {number}
 */
proto.im.MessageContent.prototype.getVisibleType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setVisibleType = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 create_time_ns = 13;
 * @return {number}
 */
proto.im.MessageContent.prototype.getCreateTimeNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setCreateTimeNs = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string sender_uid = 14;
 * @return {string}
 */
proto.im.MessageContent.prototype.getSenderUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setSenderUid = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 conversation_short_id = 17;
 * @return {number}
 */
proto.im.MessageContent.prototype.getConversationShortId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.MessageContent} returns this
 */
proto.im.MessageContent.prototype.setConversationShortId = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.ExtInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.im.ExtInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.ExtInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.ExtInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.ExtInfo}
 */
proto.im.ExtInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.ExtInfo;
  return proto.im.ExtInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.ExtInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.ExtInfo}
 */
proto.im.ExtInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.ExtInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.ExtInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.ExtInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.ExtInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.im.ExtInfo.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.ExtInfo} returns this
 */
proto.im.ExtInfo.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.im.ExtInfo.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.ExtInfo} returns this
 */
proto.im.ExtInfo.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.im.Participant.prototype.toObject = function(opt_includeInstance) {
  return proto.im.Participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.im.Participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.Participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.Participant}
 */
proto.im.Participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.im.Participant;
  return proto.im.Participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.Participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.Participant}
 */
proto.im.Participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.Participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.im.Participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.im.Participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.im.Participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.im.Participant.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.im.Participant} returns this
 */
proto.im.Participant.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uid = 5;
 * @return {string}
 */
proto.im.Participant.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.im.Participant} returns this
 */
proto.im.Participant.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.im);
